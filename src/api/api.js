// @flow
/* eslint-disable no-use-before-define */
/**
 * loopback
 * loopback
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "http://localhost:3000/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 */
export type AccessToken = {
    /**
     *
     * @type {string}
     * @memberof AccessToken
     */
    id: string;
    /**
     * time to live in seconds (2 weeks by default)
     * @type {number}
     * @memberof AccessToken
     */
    ttl?: number;
    /**
     * Array of scopes granted to this access token.
     * @type {Array<string>}
     * @memberof AccessToken
     */
    scopes?: Array<string>;
    /**
     *
     * @type {Date}
     * @memberof AccessToken
     */
    created?: Date;
    /**
     *
     * @type {string}
     * @memberof AccessToken
     */
    userId?: string;
}


/**
 *
 * @export
 */
export type CoffeeShop = {
    /**
     *
     * @type {string}
     * @memberof CoffeeShop
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof CoffeeShop
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof CoffeeShop
     */
    id?: string;
    /**
     *
     * @type {Array<Employee>}
     * @memberof CoffeeShop
     */
    employee?: Array<Employee>;
}


/**
 *
 * @export
 */
export type Employee = {
    /**
     *
     * @type {string}
     * @memberof Employee
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Employee
     */
    gender: string;
    /**
     *
     * @type {string}
     * @memberof Employee
     */
    id?: string;
}


/**
 *
 * @export
 */
export type InlineResponse200 = {
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    count?: number;
}


/**
 *
 * @export
 */
export type InlineResponse2001 = {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    exists?: boolean;
}


/**
 * Information related to the outcome of the operation
 * @export
 */
export type InlineResponse2002 = {
    /**
     * The number of instances updated
     * @type {number}
     * @memberof InlineResponse2002
     */
    count?: number;
}


/**
 *
 * @export
 */
export type NewCoffeeShop = {
    /**
     *
     * @type {string}
     * @memberof NewCoffeeShop
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof NewCoffeeShop
     */
    city: string;
    /**
     *
     * @type {Array<Employee>}
     * @memberof NewCoffeeShop
     */
    employee?: Array<Employee>;
}


/**
 *
 * @export
 */
export type NewEmployee = {
    /**
     *
     * @type {string}
     * @memberof NewEmployee
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof NewEmployee
     */
    gender: string;
}


/**
 *
 * @export
 */
export type NewUser = {
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    realm?: string;
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    email: string;
    /**
     *
     * @type {boolean}
     * @memberof NewUser
     */
    emailVerified?: boolean;
}


/**
 *
 * @export
 */
export type User = {
    /**
     *
     * @type {string}
     * @memberof User
     */
    realm?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    emailVerified?: boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
}


/**
 *
 * @export
 */
export type XAny = {
}




/**
 * CoffeeShopApi - fetch parameter creator
 * @export
 */
export const CoffeeShopApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Count instances of the model matched by where from the data source.
         * @throws {RequiredError}
         */
        coffeeShopCount(where?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/count`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new instance of the model and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopCreate(newCoffeeShop?: NewCoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof newCoffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(newCoffeeShop || {}) : (((newCoffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        coffeeShopCreateChangeStreamGetCoffeeShopsChangeStream(opts?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/change-stream`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (options !== undefined) {
                localVarQueryParameter['options'] = ((options:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        coffeeShopCreateChangeStreamPostCoffeeShopsChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/change-stream`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopDeleteById(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopDeleteById.');
            }
            const localVarPath = `/CoffeeShops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        coffeeShopExistsGetCoffeeShopsidExists(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopExistsGetCoffeeShopsidExists.');
            }
            const localVarPath = `/CoffeeShops/{id}/exists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        coffeeShopExistsHeadCoffeeShopsid(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopExistsHeadCoffeeShopsid.');
            }
            const localVarPath = `/CoffeeShops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'HEAD' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find all instances of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFind(filter?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFindById(id: string, filter?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopFindById.');
            }
            const localVarPath = `/CoffeeShops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find first instance of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFindOne(filter?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/findOne`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopPatchOrCreate(coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Counts employee of CoffeeShop.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeCountEmployee(id: string, where?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeCountEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee/count`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new instance in employee of this model.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeCreateEmployee(id: string, newEmployee?: NewEmployee, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeCreateEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof newEmployee !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(newEmployee || {}) : (((newEmployee:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes all employee of this model.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeDeleteEmployee(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeDeleteEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeDestroyByIdEmployee(id: string, fk: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeDestroyByIdEmployee.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling coffeeShopPrototypeDestroyByIdEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeFindByIdEmployee(id: string, fk: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeFindByIdEmployee.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling coffeeShopPrototypeFindByIdEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Queries employee of CoffeeShop.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeGetEmployee(id: string, filter?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeGetEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopPrototypePatchAttributes(id: string, coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypePatchAttributes.');
            }
            const localVarPath = `/CoffeeShops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeUpdateByIdEmployee(id: string, fk: string, employee?: Employee, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopPrototypeUpdateByIdEmployee.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling coffeeShopPrototypeUpdateByIdEmployee.');
            }
            const localVarPath = `/CoffeeShops/{id}/employee/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof employee !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(employee || {}) : (((employee:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceByIdPostCoffeeShopsidReplace(id: string, coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopReplaceByIdPostCoffeeShopsidReplace.');
            }
            const localVarPath = `/CoffeeShops/{id}/replace`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceByIdPutCoffeeShopsid(id: string, coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling coffeeShopReplaceByIdPutCoffeeShopsid.');
            }
            const localVarPath = `/CoffeeShops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceOrCreatePostCoffeeShopsReplaceOrCreate(coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/replaceOrCreate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceOrCreatePutCoffeeShops(coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update instances of the model matched by {{where}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopUpdateAll(where?: string, coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.
         * @throws {RequiredError}
         */
        coffeeShopUpsertWithWhere(where?: string, coffeeShop?: CoffeeShop, options: RequestOptions): FetchArgs {
            const localVarPath = `/CoffeeShops/upsertWithWhere`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof coffeeShop !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(coffeeShop || {}) : (((coffeeShop:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CoffeeShopApiType = {
    coffeeShopCount(where?: string, options?: RequestOptions): Promise<InlineResponse200>,

    coffeeShopCreate(newCoffeeShop?: NewCoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopCreateChangeStreamGetCoffeeShopsChangeStream(options?: string, options?: RequestOptions): Promise<any>,

    coffeeShopCreateChangeStreamPostCoffeeShopsChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options?: RequestOptions): Promise<any>,

    coffeeShopDeleteById(id: string, options?: RequestOptions): Promise<Object>,

    coffeeShopExistsGetCoffeeShopsidExists(id: string, options?: RequestOptions): Promise<InlineResponse2001>,

    coffeeShopExistsHeadCoffeeShopsid(id: string, options?: RequestOptions): Promise<InlineResponse2001>,

    coffeeShopFind(filter?: string, options?: RequestOptions): Promise<Array<CoffeeShop>>,

    coffeeShopFindById(id: string, filter?: string, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopFindOne(filter?: string, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopPatchOrCreate(coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopPrototypeCountEmployee(id: string, where?: string, options?: RequestOptions): Promise<InlineResponse200>,

    coffeeShopPrototypeCreateEmployee(id: string, newEmployee?: NewEmployee, options?: RequestOptions): Promise<Employee>,

    coffeeShopPrototypeDeleteEmployee(id: string, options?: RequestOptions): Promise<Response>,

    coffeeShopPrototypeDestroyByIdEmployee(id: string, fk: string, options?: RequestOptions): Promise<Response>,

    coffeeShopPrototypeFindByIdEmployee(id: string, fk: string, options?: RequestOptions): Promise<Employee>,

    coffeeShopPrototypeGetEmployee(id: string, filter?: string, options?: RequestOptions): Promise<Array<Employee>>,

    coffeeShopPrototypePatchAttributes(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopPrototypeUpdateByIdEmployee(id: string, fk: string, employee?: Employee, options?: RequestOptions): Promise<Employee>,

    coffeeShopReplaceByIdPostCoffeeShopsidReplace(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopReplaceByIdPutCoffeeShopsid(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopReplaceOrCreatePostCoffeeShopsReplaceOrCreate(coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopReplaceOrCreatePutCoffeeShops(coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,

    coffeeShopUpdateAll(where?: string, coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<InlineResponse2002>,

    coffeeShopUpsertWithWhere(where?: string, coffeeShop?: CoffeeShop, options?: RequestOptions): Promise<CoffeeShop>,
}

/**
 * CoffeeShopApi - factory function to inject configuration
 * @export
 */
export const CoffeeShopApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CoffeeShopApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @summary Count instances of the model matched by where from the data source.
         * @throws {RequiredError}
         */
        coffeeShopCount(where?: string, options?: RequestOptions = {}): Promise<InlineResponse200> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopCount(where, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a new instance of the model and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopCreate(newCoffeeShop?: NewCoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopCreate(newCoffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        coffeeShopCreateChangeStreamGetCoffeeShopsChangeStream(opts?: string, options?: RequestOptions = {}): Promise<any> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopCreateChangeStreamGetCoffeeShopsChangeStream(options, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        coffeeShopCreateChangeStreamPostCoffeeShopsChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options?: RequestOptions = {}): Promise<any> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopCreateChangeStreamPostCoffeeShopsChangeStream(UNKNOWN_BASE_TYPE, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Delete a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopDeleteById(id: string, options?: RequestOptions = {}): Promise<Object> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopDeleteById(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        coffeeShopExistsGetCoffeeShopsidExists(id: string, options?: RequestOptions = {}): Promise<InlineResponse2001> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopExistsGetCoffeeShopsidExists(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        coffeeShopExistsHeadCoffeeShopsid(id: string, options?: RequestOptions = {}): Promise<InlineResponse2001> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopExistsHeadCoffeeShopsid(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find all instances of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFind(filter?: string, options?: RequestOptions = {}): Promise<Array<CoffeeShop>> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopFind(filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFindById(id: string, filter?: string, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopFindById(id, filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find first instance of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        coffeeShopFindOne(filter?: string, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopFindOne(filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Patch an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopPatchOrCreate(coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPatchOrCreate(coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Counts employee of CoffeeShop.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeCountEmployee(id: string, where?: string, options?: RequestOptions = {}): Promise<InlineResponse200> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeCountEmployee(id, where, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Creates a new instance in employee of this model.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeCreateEmployee(id: string, newEmployee?: NewEmployee, options?: RequestOptions = {}): Promise<Employee> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeCreateEmployee(id, newEmployee, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Deletes all employee of this model.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeDeleteEmployee(id: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeDeleteEmployee(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Delete a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeDestroyByIdEmployee(id: string, fk: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeDestroyByIdEmployee(id, fk, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeFindByIdEmployee(id: string, fk: string, options?: RequestOptions = {}): Promise<Employee> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeFindByIdEmployee(id, fk, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Queries employee of CoffeeShop.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeGetEmployee(id: string, filter?: string, options?: RequestOptions = {}): Promise<Array<Employee>> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeGetEmployee(id, filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Patch attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopPrototypePatchAttributes(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypePatchAttributes(id, coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update a related item by id for employee.
         * @throws {RequiredError}
         */
        coffeeShopPrototypeUpdateByIdEmployee(id: string, fk: string, employee?: Employee, options?: RequestOptions = {}): Promise<Employee> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopPrototypeUpdateByIdEmployee(id, fk, employee, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceByIdPostCoffeeShopsidReplace(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopReplaceByIdPostCoffeeShopsidReplace(id, coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceByIdPutCoffeeShopsid(id: string, coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopReplaceByIdPutCoffeeShopsid(id, coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceOrCreatePostCoffeeShopsReplaceOrCreate(coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopReplaceOrCreatePostCoffeeShopsReplaceOrCreate(coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        coffeeShopReplaceOrCreatePutCoffeeShops(coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopReplaceOrCreatePutCoffeeShops(coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update instances of the model matched by {{where}} from the data source.
         * @throws {RequiredError}
         */
        coffeeShopUpdateAll(where?: string, coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<InlineResponse2002> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopUpdateAll(where, coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.
         * @throws {RequiredError}
         */
        coffeeShopUpsertWithWhere(where?: string, coffeeShop?: CoffeeShop, options?: RequestOptions = {}): Promise<CoffeeShop> {
            const localVarFetchArgs = CoffeeShopApiFetchParamCreator(configuration).coffeeShopUpsertWithWhere(where, coffeeShop, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Change a user's password.
         * @throws {RequiredError}
         */
        userChangePassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options: RequestOptions): FetchArgs {
            // verify required parameter 'UNKNOWN_BASE_TYPE' is not null or undefined
            if (UNKNOWN_BASE_TYPE === null || UNKNOWN_BASE_TYPE === undefined) {
                throw new RequiredError('UNKNOWN_BASE_TYPE','Required parameter UNKNOWN_BASE_TYPE was null or undefined when calling userChangePassword.');
            }
            const localVarPath = `/Users/change-password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Confirm a user registration with identity verification token.
         * @throws {RequiredError}
         */
        userConfirm(uid: string, token: string, redirect?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling userConfirm.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling userConfirm.');
            }
            const localVarPath = `/Users/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = ((uid:any):string);
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = ((token:any):string);
            }

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = ((redirect:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Count instances of the model matched by where from the data source.
         * @throws {RequiredError}
         */
        userCount(where?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/count`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new instance of the model and persist it into the data source.
         * @throws {RequiredError}
         */
        userCreate(newUser?: NewUser, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof newUser !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(newUser || {}) : (((newUser:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        userCreateChangeStreamGetUsersChangeStream(opts?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/change-stream`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (options !== undefined) {
                localVarQueryParameter['options'] = ((options:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        userCreateChangeStreamPostUsersChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/change-stream`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        userDeleteById(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userDeleteById.');
            }
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        userExistsGetUsersidExists(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userExistsGetUsersidExists.');
            }
            const localVarPath = `/Users/{id}/exists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        userExistsHeadUsersid(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userExistsHeadUsersid.');
            }
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'HEAD' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find all instances of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        userFind(filter?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        userFindById(id: string, filter?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userFindById.');
            }
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find first instance of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        userFindOne(filter?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/findOne`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Login a user with username/email and password.
         * @throws {RequiredError}
         */
        userLogin(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, include?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'UNKNOWN_BASE_TYPE' is not null or undefined
            if (UNKNOWN_BASE_TYPE === null || UNKNOWN_BASE_TYPE === undefined) {
                throw new RequiredError('UNKNOWN_BASE_TYPE','Required parameter UNKNOWN_BASE_TYPE was null or undefined when calling userLogin.');
            }
            const localVarPath = `/Users/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (include !== undefined) {
                localVarQueryParameter['include'] = ((include:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logout a user with access token.
         * @throws {RequiredError}
         */
        userLogout(options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userPatchOrCreate(user?: User, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Counts accessTokens of User.
         * @throws {RequiredError}
         */
        userPrototypeCountAccessTokens(id: string, where?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeCountAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens/count`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Creates a new instance in accessTokens of this model.
         * @throws {RequiredError}
         */
        userPrototypeCreateAccessTokens(id: string, accessToken?: AccessToken, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeCreateAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof accessToken !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessToken || {}) : (((accessToken:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes all accessTokens of this model.
         * @throws {RequiredError}
         */
        userPrototypeDeleteAccessTokens(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeDeleteAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeDestroyByIdAccessTokens(id: string, fk: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeDestroyByIdAccessTokens.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling userPrototypeDestroyByIdAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeFindByIdAccessTokens(id: string, fk: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeFindByIdAccessTokens.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling userPrototypeFindByIdAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Queries accessTokens of User.
         * @throws {RequiredError}
         */
        userPrototypeGetAccessTokens(id: string, filter?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeGetAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = ((filter:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Patch attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userPrototypePatchAttributes(id: string, user?: User, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypePatchAttributes.');
            }
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PATCH' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeUpdateByIdAccessTokens(id: string, fk: string, accessToken?: AccessToken, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeUpdateByIdAccessTokens.');
            }
            // verify required parameter 'fk' is not null or undefined
            if (fk === null || fk === undefined) {
                throw new RequiredError('fk','Required parameter fk was null or undefined when calling userPrototypeUpdateByIdAccessTokens.');
            }
            const localVarPath = `/Users/{id}/accessTokens/{fk}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"fk"}}`, encodeURIComponent(String(fk)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof accessToken !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(accessToken || {}) : (((accessToken:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Trigger user's identity verification with configured verifyOptions
         * @throws {RequiredError}
         */
        userPrototypeVerify(id: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userPrototypeVerify.');
            }
            const localVarPath = `/Users/{id}/verify`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userReplaceByIdPostUsersidReplace(id: string, user?: User, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userReplaceByIdPostUsersidReplace.');
            }
            const localVarPath = `/Users/{id}/replace`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userReplaceByIdPutUsersid(id: string, user?: User, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling userReplaceByIdPutUsersid.');
            }
            const localVarPath = `/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userReplaceOrCreatePostUsersReplaceOrCreate(user?: User, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/replaceOrCreate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userReplaceOrCreatePutUsers(user?: User, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset password for a user with email.
         * @throws {RequiredError}
         */
        userResetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options: RequestOptions): FetchArgs {
            // verify required parameter 'UNKNOWN_BASE_TYPE' is not null or undefined
            if (UNKNOWN_BASE_TYPE === null || UNKNOWN_BASE_TYPE === undefined) {
                throw new RequiredError('UNKNOWN_BASE_TYPE','Required parameter UNKNOWN_BASE_TYPE was null or undefined when calling userResetPassword.');
            }
            const localVarPath = `/Users/reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset user's password via a password-reset token.
         * @throws {RequiredError}
         */
        userSetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options: RequestOptions): FetchArgs {
            // verify required parameter 'UNKNOWN_BASE_TYPE' is not null or undefined
            if (UNKNOWN_BASE_TYPE === null || UNKNOWN_BASE_TYPE === undefined) {
                throw new RequiredError('UNKNOWN_BASE_TYPE','Required parameter UNKNOWN_BASE_TYPE was null or undefined when calling userSetPassword.');
            }
            const localVarPath = `/Users/reset-password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof UNKNOWN_BASE_TYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(UNKNOWN_BASE_TYPE || {}) : (((UNKNOWN_BASE_TYPE:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update instances of the model matched by {{where}} from the data source.
         * @throws {RequiredError}
         */
        userUpdateAll(where?: string, user?: User, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.
         * @throws {RequiredError}
         */
        userUpsertWithWhere(where?: string, user?: User, options: RequestOptions): FetchArgs {
            const localVarPath = `/Users/upsertWithWhere`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (where !== undefined) {
                localVarQueryParameter['where'] = ((where:any):string);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof user !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (((user:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UserApiType = {
    userChangePassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions): Promise<Response>,

    userConfirm(uid: string, token: string, redirect?: string, options?: RequestOptions): Promise<Response>,

    userCount(where?: string, options?: RequestOptions): Promise<InlineResponse200>,

    userCreate(newUser?: NewUser, options?: RequestOptions): Promise<User>,

    userCreateChangeStreamGetUsersChangeStream(options?: string, options?: RequestOptions): Promise<any>,

    userCreateChangeStreamPostUsersChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options?: RequestOptions): Promise<any>,

    userDeleteById(id: string, options?: RequestOptions): Promise<Object>,

    userExistsGetUsersidExists(id: string, options?: RequestOptions): Promise<InlineResponse2001>,

    userExistsHeadUsersid(id: string, options?: RequestOptions): Promise<InlineResponse2001>,

    userFind(filter?: string, options?: RequestOptions): Promise<Array<User>>,

    userFindById(id: string, filter?: string, options?: RequestOptions): Promise<User>,

    userFindOne(filter?: string, options?: RequestOptions): Promise<User>,

    userLogin(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, include?: string, options?: RequestOptions): Promise<Object>,

    userLogout(options?: RequestOptions): Promise<Response>,

    userPatchOrCreate(user?: User, options?: RequestOptions): Promise<User>,

    userPrototypeCountAccessTokens(id: string, where?: string, options?: RequestOptions): Promise<InlineResponse200>,

    userPrototypeCreateAccessTokens(id: string, accessToken?: AccessToken, options?: RequestOptions): Promise<AccessToken>,

    userPrototypeDeleteAccessTokens(id: string, options?: RequestOptions): Promise<Response>,

    userPrototypeDestroyByIdAccessTokens(id: string, fk: string, options?: RequestOptions): Promise<Response>,

    userPrototypeFindByIdAccessTokens(id: string, fk: string, options?: RequestOptions): Promise<AccessToken>,

    userPrototypeGetAccessTokens(id: string, filter?: string, options?: RequestOptions): Promise<Array<AccessToken>>,

    userPrototypePatchAttributes(id: string, user?: User, options?: RequestOptions): Promise<User>,

    userPrototypeUpdateByIdAccessTokens(id: string, fk: string, accessToken?: AccessToken, options?: RequestOptions): Promise<AccessToken>,

    userPrototypeVerify(id: string, options?: RequestOptions): Promise<Response>,

    userReplaceByIdPostUsersidReplace(id: string, user?: User, options?: RequestOptions): Promise<User>,

    userReplaceByIdPutUsersid(id: string, user?: User, options?: RequestOptions): Promise<User>,

    userReplaceOrCreatePostUsersReplaceOrCreate(user?: User, options?: RequestOptions): Promise<User>,

    userReplaceOrCreatePutUsers(user?: User, options?: RequestOptions): Promise<User>,

    userResetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions): Promise<Response>,

    userSetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions): Promise<Response>,

    userUpdateAll(where?: string, user?: User, options?: RequestOptions): Promise<InlineResponse2002>,

    userUpsertWithWhere(where?: string, user?: User, options?: RequestOptions): Promise<User>,
}

/**
 * UserApi - factory function to inject configuration
 * @export
 */
export const UserApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UserApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         *
         * @summary Change a user's password.
         * @throws {RequiredError}
         */
        userChangePassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userChangePassword(UNKNOWN_BASE_TYPE, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Confirm a user registration with identity verification token.
         * @throws {RequiredError}
         */
        userConfirm(uid: string, token: string, redirect?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userConfirm(uid, token, redirect, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Count instances of the model matched by where from the data source.
         * @throws {RequiredError}
         */
        userCount(where?: string, options?: RequestOptions = {}): Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userCount(where, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a new instance of the model and persist it into the data source.
         * @throws {RequiredError}
         */
        userCreate(newUser?: NewUser, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userCreate(newUser, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        userCreateChangeStreamGetUsersChangeStream(opts?: string, options?: RequestOptions = {}): Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userCreateChangeStreamGetUsersChangeStream(options, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Create a change stream.
         * @throws {RequiredError}
         */
        userCreateChangeStreamPostUsersChangeStream(UNKNOWN_BASE_TYPE?: UNKNOWN_BASE_TYPE, options?: RequestOptions = {}): Promise<any> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userCreateChangeStreamPostUsersChangeStream(UNKNOWN_BASE_TYPE, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Delete a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        userDeleteById(id: string, options?: RequestOptions = {}): Promise<Object> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userDeleteById(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        userExistsGetUsersidExists(id: string, options?: RequestOptions = {}): Promise<InlineResponse2001> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userExistsGetUsersidExists(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Check whether a model instance exists in the data source.
         * @throws {RequiredError}
         */
        userExistsHeadUsersid(id: string, options?: RequestOptions = {}): Promise<InlineResponse2001> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userExistsHeadUsersid(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find all instances of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        userFind(filter?: string, options?: RequestOptions = {}): Promise<Array<User>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userFind(filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find a model instance by {{id}} from the data source.
         * @throws {RequiredError}
         */
        userFindById(id: string, filter?: string, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userFindById(id, filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find first instance of the model matched by filter from the data source.
         * @throws {RequiredError}
         */
        userFindOne(filter?: string, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userFindOne(filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Login a user with username/email and password.
         * @throws {RequiredError}
         */
        userLogin(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, include?: string, options?: RequestOptions = {}): Promise<Object> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userLogin(UNKNOWN_BASE_TYPE, include, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Logout a user with access token.
         * @throws {RequiredError}
         */
        userLogout(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userLogout(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Patch an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userPatchOrCreate(user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPatchOrCreate(user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Counts accessTokens of User.
         * @throws {RequiredError}
         */
        userPrototypeCountAccessTokens(id: string, where?: string, options?: RequestOptions = {}): Promise<InlineResponse200> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeCountAccessTokens(id, where, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Creates a new instance in accessTokens of this model.
         * @throws {RequiredError}
         */
        userPrototypeCreateAccessTokens(id: string, accessToken?: AccessToken, options?: RequestOptions = {}): Promise<AccessToken> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeCreateAccessTokens(id, accessToken, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Deletes all accessTokens of this model.
         * @throws {RequiredError}
         */
        userPrototypeDeleteAccessTokens(id: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeDeleteAccessTokens(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Delete a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeDestroyByIdAccessTokens(id: string, fk: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeDestroyByIdAccessTokens(id, fk, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Find a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeFindByIdAccessTokens(id: string, fk: string, options?: RequestOptions = {}): Promise<AccessToken> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeFindByIdAccessTokens(id, fk, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Queries accessTokens of User.
         * @throws {RequiredError}
         */
        userPrototypeGetAccessTokens(id: string, filter?: string, options?: RequestOptions = {}): Promise<Array<AccessToken>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeGetAccessTokens(id, filter, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Patch attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userPrototypePatchAttributes(id: string, user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypePatchAttributes(id, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update a related item by id for accessTokens.
         * @throws {RequiredError}
         */
        userPrototypeUpdateByIdAccessTokens(id: string, fk: string, accessToken?: AccessToken, options?: RequestOptions = {}): Promise<AccessToken> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeUpdateByIdAccessTokens(id, fk, accessToken, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Trigger user's identity verification with configured verifyOptions
         * @throws {RequiredError}
         */
        userPrototypeVerify(id: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userPrototypeVerify(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userReplaceByIdPostUsersidReplace(id: string, user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userReplaceByIdPostUsersidReplace(id, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace attributes for a model instance and persist it into the data source.
         * @throws {RequiredError}
         */
        userReplaceByIdPutUsersid(id: string, user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userReplaceByIdPutUsersid(id, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userReplaceOrCreatePostUsersReplaceOrCreate(user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userReplaceOrCreatePostUsersReplaceOrCreate(user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Replace an existing model instance or insert a new one into the data source.
         * @throws {RequiredError}
         */
        userReplaceOrCreatePutUsers(user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userReplaceOrCreatePutUsers(user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Reset password for a user with email.
         * @throws {RequiredError}
         */
        userResetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userResetPassword(UNKNOWN_BASE_TYPE, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Reset user's password via a password-reset token.
         * @throws {RequiredError}
         */
        userSetPassword(UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userSetPassword(UNKNOWN_BASE_TYPE, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update instances of the model matched by {{where}} from the data source.
         * @throws {RequiredError}
         */
        userUpdateAll(where?: string, user?: User, options?: RequestOptions = {}): Promise<InlineResponse2002> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userUpdateAll(where, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         *
         * @summary Update an existing model instance or insert a new one into the data source based on the where criteria.
         * @throws {RequiredError}
         */
        userUpsertWithWhere(where?: string, user?: User, options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).userUpsertWithWhere(where, user, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = {
    CoffeeShopApi: CoffeeShopApiType,

    UserApi: UserApiType,
 }
